# üåê Configuration Nginx pour SwissPark
# Optimisations de performance et de s√©curit√©

server {
    listen 80;
    listen [::]:80;
    server_name suissepark.ch www.suissepark.ch;
    
    # Redirection HTTP vers HTTPS
    return 301 https://$server_name$request_uri;
}

server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name suissepark.ch www.suissepark.ch;
    
    # Configuration SSL/TLS
    ssl_certificate /etc/letsencrypt/live/suissepark.ch/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/suissepark.ch/privkey.pem;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    
    # HSTS
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
    
    # Headers de s√©curit√©
    add_header X-Frame-Options "DENY" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Permissions-Policy "camera=(), microphone=(), geolocation=()" always;
    
    # Content Security Policy
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://www.googletagmanager.com; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com; font-src 'self' https://fonts.gstatic.com; img-src 'self' data: https:; connect-src 'self' https://www.google-analytics.com;" always;
    
    # Racine du site
    root /var/www/suissepark.ch;
    index index.html index.htm;
    
    # Gestion des erreurs
    error_page 404 /404.html;
    error_page 500 502 503 504 /50x.html;
    
    # Compression Gzip
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;
    
    # Cache des fichiers statiques
    location ~* \.(css|js|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        add_header Vary Accept-Encoding;
        access_log off;
    }
    
    # Cache des fichiers HTML
    location ~* \.(html|htm)$ {
        expires 1h;
        add_header Cache-Control "public";
        add_header Vary Accept-Encoding;
    }
    
    # Protection contre les attaques
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    location ~ ~$ {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    # Protection contre les injections
    location ~* (eval|system|exec|passthru|shell_exec|proc_open|popen|curl_exec|curl_multi_exec|parse_ini_file|show_source) {
        deny all;
    }
    
    # Protection contre les hotlinks
    location ~* \.(jpg|jpeg|png|gif|webp)$ {
        valid_referers none blocked suissepark.ch *.suissepark.ch;
        if ($invalid_referer) {
            return 403;
        }
    }
    
    # Configuration principale
    location / {
        try_files $uri $uri/ $uri.html =404;
        
        # Headers suppl√©mentaires
        add_header X-Robots-Tag "index, follow" always;
        
        # Logs
        access_log /var/log/nginx/suissepark.ch.access.log;
        error_log /var/log/nginx/suissepark.ch.error.log;
    }
    
    # API (pour les futures fonctionnalit√©s)
    location /api/ {
        # Configuration pour l'API
        add_header Access-Control-Allow-Origin "*";
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS";
        add_header Access-Control-Allow-Headers "Content-Type, Authorization";
        
        # Proxy vers l'API backend (si n√©cessaire)
        # proxy_pass http://localhost:3000;
        # proxy_set_header Host $host;
        # proxy_set_header X-Real-IP $remote_addr;
    }
    
    # Sitemap et robots
    location = /sitemap.xml {
        expires 1d;
        add_header Cache-Control "public";
    }
    
    location = /robots.txt {
        expires 1d;
        add_header Cache-Control "public";
    }
    
    # Manifest PWA
    location = /manifest.json {
        expires 1d;
        add_header Cache-Control "public";
        add_header Content-Type "application/manifest+json";
    }
    
    # Service Worker
    location = /sw.js {
        expires 1d;
        add_header Cache-Control "public";
        add_header Content-Type "application/javascript";
    }
    
    # Optimisation des performances
    client_max_body_size 10M;
    client_body_timeout 12;
    client_header_timeout 12;
    
    # Keep-alive
    keepalive_timeout 65;
    keepalive_requests 100;
    
    # Rate limiting (protection DDoS)
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=login:10m rate=1r/s;
    
    location /api/ {
        limit_req zone=api burst=20 nodelay;
    }
    
    location /login {
        limit_req zone=login burst=5 nodelay;
    }
    
    # Logs d'acc√®s
    access_log /var/log/nginx/suissepark.ch.access.log combined buffer=512k flush=1m;
    error_log /var/log/nginx/suissepark.ch.error.log warn;
}

# Configuration pour www (redirection)
server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name www.suissepark.ch;
    
    # M√™me configuration SSL
    ssl_certificate /etc/letsencrypt/live/suissepark.ch/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/suissepark.ch/privkey.pem;
    
    # Redirection vers non-www
    return 301 https://suissepark.ch$request_uri;
}
